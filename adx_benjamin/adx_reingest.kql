// NOUVELLE INGEGSTION POUR PARTITIONNEMENT




.create-merge table legacyTelemetry_Raw (timestamp:datetime,eventType:string,deviceId:string,levelId:string,metric:string,value:double) with (folder = 'telemetry')

.alter-merge table legacyTelemetry_Raw policy partitioning ```
{
  "PartitionKeys": [
    {
      "ColumnName": "deviceId",
      "Kind": "Hash",
      "Properties": {
        "Function": "XxHash64",
        "MaxPartitionCount": 128,
        "Seed": 1,
        "PartitionAssignmentMode": "Uniform"
      }
    },
    {
      "ColumnName": "timestamp",
      "Kind": "UniformRange",
      "Properties": {
        "Reference": "2021-01-01T00:00:00",
        "RangeSize": "1.00:00:00",
        "OverrideCreationTime": true
      }
    }
  ],
  "EffectiveDateTime":"2024-11-10T00:00:00"
}
```

.alter table legacyTelemetry_Raw policy caching hot =3500d
// .alter table telemetry_Raw policy caching hot =3500d


// 1m
.create-or-alter materialized-view with(folder ='aggregates/telemetry') legacyTelemetry_Aggregate1m on table legacyTelemetry_Raw
{
    legacyTelemetry_Raw 
    | summarize min(value),avg(value),max(value),count() by bin(timestamp,1m),eventType,deviceId,levelId,metric
}

.alter-merge materialized-view legacyTelemetry_Aggregate1m policy partitioning ```
{
  "PartitionKeys": [
    {
      "ColumnName": "deviceId",
      "Kind": "Hash",
      "Properties": {
        "Function": "XxHash64",
        "MaxPartitionCount": 128,
        "Seed": 1,
        "PartitionAssignmentMode": "Uniform"
      }
    },
    {
      "ColumnName": "timestamp",
      "Kind": "UniformRange",
      "Properties": {
        "Reference": "2021-01-01T00:00:00",
        "RangeSize": "10.00:00:00",
        "OverrideCreationTime": true
      }
    }
  ],
  "EffectiveDateTime":"2024-11-10T00:00:00"
}
```

.alter materialized-view legacyTelemetry_Aggregate1m policy caching hot =3500d
// .alter materialized-view telemetry_Aggregate1m policy caching hot =500h






// 1h
.create-or-alter materialized-view with(folder ='aggregates/telemetry') legacyTelemetry_Aggregate1h on table legacyTelemetry_Raw
{
    legacyTelemetry_Raw 
    | summarize min(value),avg(value),max(value),count() by bin(timestamp,1h),eventType,deviceId,levelId,metric
}

.alter-merge materialized-view legacyTelemetry_Aggregate1h policy partitioning ```
{
  "PartitionKeys": [
    {
      "ColumnName": "deviceId",
      "Kind": "Hash",
      "Properties": {
        "Function": "XxHash64",
        "MaxPartitionCount": 128,
        "Seed": 1,
        "PartitionAssignmentMode": "Uniform"
      }
    },
    {
      "ColumnName": "timestamp",
      "Kind": "UniformRange",
      "Properties": {
        "Reference": "2021-01-01T00:00:00",
        "RangeSize": "375.00:00:00",
        "OverrideCreationTime": true
      }
    }
  ],
  "EffectiveDateTime":"2024-11-11T00:00:00"
}
```


.alter materialized-view legacyTelemetry_Aggregate1h policy caching hot =3500d
// .alter materialized-view telemetry_Aggregate1h policy caching hot =500d






// 1d
// with last_value & last_timestamp
.create-or-alter materialized-view with(folder ='aggregates/telemetry') legacyTelemetry_Aggregate1d on table legacyTelemetry_Raw
{
    legacyTelemetry_Raw 
    | summarize min(value),avg(value),max(value),count() by bin(timestamp,1d),eventType,deviceId,levelId,metric
}

.alter-merge materialized-view legacyTelemetry_Aggregate1d policy partitioning ```
{
  "PartitionKeys": [
    {
      "ColumnName": "deviceId",
      "Kind": "Hash",
      "Properties": {
        "Function": "XxHash64",
        "MaxPartitionCount": 128,
        "Seed": 1,
        "PartitionAssignmentMode": "Uniform"
      }
    }
  ],
  "EffectiveDateTime":"2021-01-01T00:00:00"
}
```

.alter materialized-view legacyTelemetry_Aggregate1d policy caching hot =3500d




// Availability
.create-or-alter materialized-view with (folder ='aggregates/telemetry') legacyTelemetry_Availability on table legacyTelemetry_Raw { 
    legacyTelemetry_Raw
    | summarize Availability = count() by bin(timestamp,1d)
}

.alter materialized-view legacyTelemetry_Availability policy caching hot =3500d




// ----------------------- start RE-Ingest


.show table deviceTelemetry extents details
|extend IsPartitioned = isnotempty(Partition)
// |where not(IsPartitioned)
|summarize extentCount=count(),sum(RowCount),format_bytes(sum(CompressedSize)) by bin(MaxCreatedOn,1d),IsPartitioned
|order by MaxCreatedOn asc 

.show table deviceTelemetry extents hot details
| extend IsPartitioned = isnotempty(Partition)
| extend MinCreatedOn,MaxCreatedOn,RowCount
|summarize extentCount=count(),sum(RowCount),format_bytes(sum(CompressedSize)) by bin(MaxCreatedOn,1d),IsPartitioned
|order by MaxCreatedOn asc 

.show table deviceTelemetry extents  details
|extend IsPartitioned = isnotempty(Partition)
|where MaxCreatedOn >=datetime(2024-06-01 00:00:00.0000000) and MaxCreatedOn <= datetime(2024-07-01 00:00:00.0000000)
|summarize extentCount=count(),min(MaxCreatedOn),max(MaxCreatedOn),format_bytes(sum(CompressedSize)) by IsPartitioned
//Column1
//7 GB
//103 GB

.alter table deviceTelemetry policy caching 
        hot = 3d
        
                ,
        hot_window = datetime(2024-07-01 00:00:00.0000000) .. datetime(2024-07-13 00:00:00.0000000)

.show table deviceTelemetry policy caching 




.show database extents partitioning statistics 
| project TableName,TotalRowCount,PartitionedRowsPercentage
|where not(  TableName contains 'tsi' or TableName contains "6h" or TableName contains "10m")
//deviceTelemetry
//84,04852


.show database extents hot
|summarize extentCount=count(),min(MinCreatedOn),max(MaxCreatedOn),sum(CompressedSize) by TableName
|order by sum_CompressedSize desc 
| extend sum_CompressedSize =format_bytes(sum_CompressedSize)


.show database extents hot
|summarize sum(CompressedSize) |extend cache=format_bytes(sum_CompressedSize)
| extend maxCache=sum_CompressedSize*100/86.0
| extend availableCache=maxCache-sum_CompressedSize
| project cache,maxCache=format_bytes(maxCache),availableCache=format_bytes(availableCache)




.show operations |where Operation =='ExtentsPartition'|where StartedOn > ago(1d)
| summarize count(), arg_max(LastUpdatedOn,*) by OperationId
| extend Duration=iif(State =='InProgress',now()-StartedOn,Duration)
| where State =='InProgress'
| order by StartedOn desc


.show commands | where CommandType =='ExtentsPartition'|where StartedOn > ago(4h)
|project-keep  Text,StartedOn,State,LastUpdatedOn
| extend tableName = extract("table ([^ ]+)", 1, Text)
| extend dateFrom = todatetime(extract("extentCreatedOnFrom = datetime\\(([^\\)]+)\\)", 1, Text))
| extend dateTo = todatetime(extract("extentCreatedOnTo = datetime\\(([^\\)]+)\\)", 1, Text))
|project StartedOn,State,tableName,dateFrom,dateTo,duration=LastUpdatedOn-StartedOn,Text
| summarize count(),min(dateFrom),max(dateTo) by tableName

.show commands |where LastUpdatedOn > ago(1h)





// ----------------------- when all done

// allAggregates 
.create-or-alter function with (folder = 'aggregates') legacyTelemetry_Aggregate(bucket:timespan){
union 
    (legacyTelemetry_Aggregate1d|where bucket==1d)
    ,(legacyTelemetry_Aggregate1h|where bucket==1h or bucket==6h)
    ,(legacyTelemetry_Aggregate1m|where bucket==1m or bucket==10m)
    ,(legacyTelemetry_Raw|where bucket==1s|project timestamp,eventType,deviceId,levelId,metric,min_value=value,avg_value=value,max_value=value,count_=1)
}
//ok

.create-or-alter function with (folder = 'Trender') all_telemetry_Raw(){
union
    (deviceTelemetry|project timestamp,eventType,deviceId,levelId,metric,value)
    ,(legacyTelemetry_Raw|project timestamp,eventType,deviceId,levelId,metric,value)
}
//ok

.create-or-alter function with (folder = 'Trender') all_telemetry_Aggregates(bucket:timespan){
union
    deviceTelemetry_Aggregates(bucket)
    ,legacyTelemetry_Aggregate(bucket)
}
//ok

.create-or-alter function with (folder = 'Trender', docstring = "Get Total Availability") GetTotalAvailability() {
union 
    deviceTelemetry_TotalAvailability,
    legacyTelemetry_Availability,
    (print timestamp=now(),Availability=0)
| summarize sum(Availability) by timestamp
|where timestamp >= datetime(2022-01-01)
} 
//ok


.alter table legacyTelemetry_Raw policy caching hot =3d

.alter materialized-view legacyTelemetry_Aggregate1m policy caching hot =500h

.alter materialized-view legacyTelemetry_Aggregate1h policy caching hot =500d

.alter materialized-view legacyTelemetry_Aggregate1d policy caching hot =3500d

.alter materialized-view legacyTelemetry_Availability policy caching hot =3500d



.alter table deviceTelemetry policy caching hot =3d

.alter materialized-view deviceTelemetry_Aggregate1m policy caching hot =500h

.alter materialized-view deviceTelemetry_Aggregate1h policy caching hot =500d

.alter materialized-view deviceTelemetry_Aggregate1d policy caching hot =3500d



